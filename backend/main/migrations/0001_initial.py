# Generated by Django 5.0.1 on 2024-01-21 21:26

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('answer_id', models.AutoField(primary_key=True, serialize=False)),
                ('body', models.TextField(blank=True, null=True)),
                ('image_url', models.FileField(blank=True, default=None, null=True, upload_to='main/')),
                ('view_count', models.IntegerField(blank=True, null=True)),
                ('upvote_count', models.IntegerField(blank=True, null=True)),
                ('downvote_count', models.IntegerField(blank=True, null=True)),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('question_id', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('user_id', models.CharField(primary_key=True, serialize=False)),
                ('user_type', models.IntegerField(blank=True, null=True)),
                ('username', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ('password', models.CharField(blank=True, max_length=255, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('avatar_url', models.URLField(blank=True, null=True)),
                ('interest', models.JSONField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updatedAt', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('profile_url', models.URLField(blank=True, null=True)),
                ('followed_by', models.ManyToManyField(blank=True, related_name='followers', to='main.users')),
                ('following', models.ManyToManyField(blank=True, related_name='following_users', to='main.users')),
            ],
        ),
        migrations.CreateModel(
            name='Posts',
            fields=[
                ('post_id', models.CharField(primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('image_url', models.FileField(default=None, null=True, upload_to='media/')),
                ('upvote_count', models.IntegerField(blank=True, null=True)),
                ('downvote_count', models.IntegerField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updatedAt', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('post_url', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('question_id', models.CharField(primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('body', models.TextField(blank=True, null=True)),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('view_count', models.IntegerField(blank=True, null=True)),
                ('upvote_count', models.IntegerField(blank=True, null=True)),
                ('downvote_count', models.IntegerField(blank=True, null=True)),
                ('keywords', models.JSONField(blank=True, null=True)),
                ('question_url', models.URLField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('comment_id', models.CharField(primary_key=True, serialize=False)),
                ('body', models.TextField(blank=True, null=True)),
                ('commentable_id', models.CharField(blank=True, max_length=255, null=True)),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('upvote_count', models.IntegerField(blank=True, null=True)),
                ('downvote_count', models.IntegerField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updatedAt', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('parent_comment_id', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.comment')),
            ],
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='main.users')),
                ('school', models.CharField(blank=True, max_length=255, null=True)),
                ('primary_major', models.CharField(blank=True, max_length=255, null=True)),
                ('secondary_major', models.CharField(blank=True, max_length=255, null=True)),
                ('degree_type', models.CharField(blank=True, max_length=25, null=True)),
                ('graduation_year', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Employement',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='main.users')),
                ('position', models.CharField(blank=True, max_length=50, null=True)),
                ('company', models.CharField(blank=True, max_length=255, null=True)),
                ('start_year', models.IntegerField(blank=True, null=True)),
                ('end_year', models.IntegerField(blank=True, null=True)),
                ('currently_working', models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='main.users')),
                ('loc', models.CharField(blank=True, max_length=255, null=True)),
                ('start_year', models.IntegerField(blank=True, null=True)),
                ('end_year', models.IntegerField(blank=True, null=True)),
                ('currently_living', models.BooleanField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('notification_id', models.CharField(primary_key=True, serialize=False)),
                ('type', models.IntegerField(blank=True, null=True)),
                ('notification_url', models.URLField(blank=True, null=True)),
                ('seen', models.BooleanField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updatedAt', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('readAt', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.users')),
            ],
        ),
        migrations.AddField(
            model_name='users',
            name='bookmarked',
            field=models.ManyToManyField(blank=True, related_name='bookmarked_users', to='main.question'),
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('topic_id', models.CharField(primary_key=True, serialize=False)),
                ('cover_img', models.URLField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('following_count', models.IntegerField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updatedAt', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('views', models.IntegerField(blank=True, default=0, null=True)),
                ('topic_type', models.IntegerField(choices=[(0, 'Parent'), (1, 'Child')], default=0)),
                ('parent_topic_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_topics', to='main.topic')),
            ],
        ),
        migrations.AddField(
            model_name='question',
            name='subtopic_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questions_subtopic', to='main.topic'),
        ),
        migrations.AddField(
            model_name='question',
            name='topic_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questions_topic', to='main.topic'),
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('vote_id', models.CharField(primary_key=True, serialize=False)),
                ('type', models.BooleanField(blank=True, null=True)),
                ('votable_type', models.IntegerField(blank=True, null=True)),
                ('votable_id', models.CharField(blank=True, max_length=255, null=True)),
                ('createdAt', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.users')),
            ],
        ),
    ]
